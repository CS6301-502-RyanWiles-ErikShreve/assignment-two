<?xml version="1.0" encoding="UTF-8"?>
<bug_reports>

	<bug_report id="57965">
		<title>Multiple resources in the same union are collapsed if the source file is the same, even if the paths are different</title>
		<description>
			This is a real example which hit us in a build but I condensed it down to the following:

    &lt;?xml version="1.0"?&gt;
    &lt;project name="release" default="test"&gt;
        &lt;target name="test"&gt;
            &lt;mkdir dir="build"/&gt;
            &lt;copy todir="build"&gt;
                &lt;union&gt;
                    &lt;fileset dir="src" includes="config/log4j.properties" /&gt;
                    &lt;fileset dir="src/config" includes="log4j.properties"/&gt;
                &lt;/union&gt;
            &lt;/copy&gt;
        &lt;/target&gt;

        &lt;target name="clean"&gt;
            &lt;delete dir="build"/&gt;
        &lt;/target&gt;
    &lt;/project&gt;

So the two resources have different paths:
    config/log4j.properties
    log4j.properties

But despite their paths being different, the second of these seems to be deduplicated away by the &lt;union&gt;.

I looked at the code in Union and decided that it was probably using the default equals() on FileResource, which does indeed only look at the full file path. Perhaps that should be taking into account the base directory instead.
		</description>
		<system_version>1.9.4</system_version>
		<change_set>
			<system_revision>592aa749733cf20247ebfa5dd9dd571216e71bf3</system_revision>
			<modified_methods>
				<method id="">
					<signature>int compareTo(Resource)</signature>
					<file>src/main/org/apache/tools/ant/types/resources/FileResource.java</file>
				</method>
			</modified_methods>
		</change_set>
		<unit_test></unit_test>
	</bug_report>

	<bug_report id="58886">
		<title>Targets are called several times</title>
		<description>
			Created attachment 33460 [details]
Scripts reproducing the issue.

Under certain conditions, some targets are called two times.
The attached archive contains some simple scripts to reproduce the issue (build file is main.xml). It involves the usage of an extension point, and importing scripts in separated folders.
The script fails if the target bar is called two times, succeed otherwise.

The bug appears since version 1.9.4 (1.9.3 works fine, 1.9.6 still contains the issue).
The bug seems OS independent and can be reproduce on Windows or MacOSX.
		</description>
		<system_version>1.9.4</system_version>
		<change_set>
			<system_revision>7046631e9a490e203f61b419a272aed0d428506c</system_revision>
			<modified_methods>
				<method id="">
					<signature>Resource getFileAttributeResource()</signature>
					<file>src/main/org/apache/tools/ant/taskdefs/ImportTask.java</file>
				</method>
			</modified_methods>
		</change_set>
		<unit_test></unit_test>
	</bug_report>

	<bug_report id="57789">
		<title>Add possibility to send email with CC and BCC via MailLogger</title>
		<description>
			MailLogger does not allow to send emails with CC and BCC.
		</description>
		<system_version>1.9.4</system_version>
		<change_set>
			<system_revision>1a584200e27de7867d7f613ff9c910dc0cc9730a
			</system_revision>
			<modified_methods>
				<method
					id="">
					<signature>void buildFinished(BuildEvent)</signature>
					<file>src/main/org/apache/tools/ant/listener/MailLogger.java</file>
				</method>
			</modified_methods>
		</change_set>
		<unit_test></unit_test>
	</bug_report>

	<bug_report id="57048">
		<title>Default gzip decoding in &lt;get&gt; is not backwards compatible</title>
		<description>
		We have Ant script which downloads tar.gz via HTTP using "get" task and then unpacks it using "untar" task. Some HTTP servers, e.g. Amazon S3 storage, have "Content-Encoding: gzip" header in response for gzipped files. Ant 1.9.4 automatically un-gzips file if it sees such header.

It's pretty smart, but such difference between Ant versions makes it nearly impossible to write portable Ant script: "untar" task requires "compression" parameter. For 1.9.3 and older it should be "gzip", for 1.9.4 and sooner – "none".

We have found a workaround for this problem (using getversion hack).

I propose either adding some parameter to "get" task disabling auto-ungzipping or revert auto-ungipping completely.
		</description>
		<system_version>1.9.4</system_version>
		<change_set>
			<system_revision>faedd2bc5b9fdcaa0650966bc7fef43c5c59cf9a
			</system_revision>
			<modified_methods>
				<method id="openConnection">
					<signature>URLConnection openConnection(URL)</signature>
					<file>src/main/org/apache/tools/ant/taskdefs/Get.java</file>
				</method>
				<method id="downloadFile">
					<signature>boolean downloadFile()</signature>
					<file>src/main/org/apache/tools/ant/taskdefs/Get.java</file>
				</method>
			</modified_methods>
		</change_set>
		<unit_test></unit_test>
	</bug_report>

	<bug_report id="57822">
		<title>Untar task untars into rubbish</title>
		<description>
		On Ant 1.7, 1.8 there are no problems. If you choose to use Ant 1.9 at runtime then this happens when trying to untar a file:

untar:
    [untar] Expanding: /MV5C/colony/worker/cics.ds.v200/PI37397/com.ibm.cics.php/natives/DSObjects.tar into /MV5C/colony/worker/cics.ds.v200/PI37397/dist

    [untar] expanding øÇø%ÑÂ%ÑÂ%?/ÀÁÊË? to /MV5C/colony/worker/cics.ds.v200/PI37397/dist/øÇø%ÑÂ%ÑÂ%?/ÀÁÊË?

    [untar] expanding øÇø%ÑÂ%ÑÂÌ/øÑÄË? to /MV5C/colony/worker/cics.ds.v200/PI37397/dist/øÇø%ÑÂ%ÑÂÌ/øÑÄË?

DSObjects.tar should untar into php/lib/** and works perfectly on previous versions of Ant.

Something seems to have gone wrong with the encoding - but the untar task does not allow any encoding modification on Ant 1.9.
		</description>
		<system_version>1.9.4</system_version>
		<change_set>
			<system_revision>1a584200e27de7867d7f613ff9c910dc0cc9730a</system_revision>
			<modified_methods>
				<method
					id="">
					<signature>void execute()</signature>
					<file>src/main/org/apache/tools/ant/taskdefs/Tar.java</file>
				</method>
				<method	id="">
					<signature>void expandStream(String, InputStream, File)</signature>
					<file>src/main/org/apache/tools/ant/taskdefs/Untar.java</file>
				</method>
				<method	id="">
					<signature>ArchiveFileSet(ArchiveFileSet)</signature>
					<file>src/main/org/apache/tools/ant/types/ArchiveFileSet.java</file>
				</method>
				<method	id="">
					<signature>ArchiveScanner newArchiveScanner()</signature>
					<file>src/main/org/apache/tools/ant/types/TarFileSet.java</file>
				</method>
				<method	id="">
					<signature>void fillMapsFromArchive(Resource, String, Map&lt;String, Resource&gt;, Map&lt;String, Resource&gt;, Map&lt;String, Resource&gt;, Map&lt;String, Resource&gt;)</signature>
					<file>src/main/org/apache/tools/ant/types/TarScanner.java</file>
				</method>
				<method	id="">
					<signature>ZipFileSet(ZipFileSet)</signature>
					<file>src/main/org/apache/tools/ant/types/ZipFileSet.java</file>
				</method>
			</modified_methods>
		</change_set>
		<unit_test></unit_test>
	</bug_report>


</bug_reports>